@page "/listadoclientes"
@using Pintureria.Aplicacion
@using Microsoft.JSInterop
@inject ListarClientesUseCase ListarClientesUseCase
@inject IJSRuntime JsRuntime;
@inject EliminarClienteUseCase EliminarClienteUseCase
@inject NavigationManager Navegador

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>NOMBRE</th>
            <th>DNI/CUIT</th>
            <th>ACCIÃ“N</th>
        </tr>
    </thead>
    <tbody>
        @if (listado != null){
            @foreach (var cli in listado)
            {
                <tr>
                    <td>@cli.Id</td>
                    <td>@cli.Nombre</td>
                    @if (clientesFisicos != null && clientesFisicos.Contains<Cliente>(cli)){ ClienteFisico? cf = cli as ClienteFisico; <td>@cf?.DNI</td> } 
                    else {ClienteEmpresa? ce = cli as ClienteEmpresa; <td>@ce?.CUIT</td> }
                    <td>
                        <button class="btn btn-primary" onclick="()=>EditarCliente(cli)">
                            <i class="oi oi-pencil"></i>
                        </button>
                        <button class="btn btn-danger" onclick="()=>EliminarCliente(cli.Id)">
                            <i class="oi oi-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {

    RepositorioSqlite<Cliente>? repositorio;
    IEnumerable<Cliente>? listado;
    IEnumerable<ClienteFisico>? clientesFisicos;
    EliminarClienteUseCase? eliminarClienteUseCase;
    bool esFisico = false;

    protected override void OnInitialized()
    {
        RepositorioSqlite<Cliente> repositorio = new RepositorioSqlite<Cliente>(); 
        listado = new ListarClientesUseCase(repositorio).Ejecutar();
        clientesFisicos = listado.Where( c => c.GetType().Name == "ClienteFisico" ) as IEnumerable<ClienteFisico>;  
    }
    protected bool EsFisico(Cliente unCliente)
    {
        return unCliente is ClienteFisico;
    }

    async Task EliminarCliente(int id)
    {
        bool confirmado = await JsRuntime.InvokeAsync<bool>("confirm",
        $"Desea eliminar el cliente {id}?");
        if (confirmado)
        {
            repositorio = new RepositorioSqlite<Cliente>();
            eliminarClienteUseCase = new EliminarClienteUseCase(repositorio);
            EliminarClienteUseCase.Ejecutar(id);
            listado = ListarClientesUseCase.Ejecutar();
        }
    }

    async Task EditarCliente(Cliente cli)
    {
        bool confirmado = await JsRuntime.InvokeAsync<bool>("confirm",
        $"Desea editar el cliente {cli.Id}?");
        if (confirmado)
        {
            if (EsFisico(cli)){
                repositorio = new RepositorioSqlite<Cliente>();
                Navegador.NavigateTo("/agregarclientefisico");
            } else {
                Navegador.NavigateTo("/agregarclienteempresa");
            }
        }
    }

}